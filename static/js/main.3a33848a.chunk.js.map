{"version":3,"sources":["components/Section/Section.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","FeedbackOptions","this","props","options","onLeaveFeedback","map","option","onClick","Component","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","App","state","getPositivePercentage","Math","round","feedbackActionHandler","setState","Object","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAAaA,EAAU,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACrB,oCACE,oBAAIC,UAAU,gBAAd,SAA+BF,IAC9BC,MCDQE,EAAb,4JACE,WACE,MAAqCC,KAAKC,MAAlCC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,gBAEjB,OACE,qBAAKL,UAAU,qBAAf,SACGI,EAAQE,KAAI,SAACC,GACZ,OACE,wBAEEC,QAASH,EAAgBE,GACzBP,UAAU,kBAHZ,SAKGO,GAJI,MAAQA,YAT3B,GAAqCE,aCFxBC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC7B,OAAO,mBAAGX,UAAU,oBAAb,SAAkCW,KCE9BC,EAAb,4JACE,WACE,MAA0DV,KAAKC,MAAvDU,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBACnC,OAAOJ,GAAQC,GAAWC,EACxB,gCACE,oBAAGf,UAAU,YAAb,mBAAgCa,KAChC,oBAAGb,UAAU,YAAb,sBAAmCc,KACnC,oBAAGd,UAAU,YAAb,kBAA+Be,KAC/B,oBAAGf,UAAU,YAAb,oBAAiCgB,KACjC,oBAAGhB,UAAU,YAAb,gCAA6CiB,EAA7C,UAGF,cAAC,EAAD,CAAcN,QAAQ,0BAZ5B,GAAgCF,aC+CjBS,G,kNAzCbC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPK,sBAAwB,WACtB,OACEC,KAAKC,MACgB,IAAlB,EAAKH,MAAMN,MAAe,EAAKM,MAAMN,KAAO,EAAKM,MAAML,QAAU,EAAKK,MAAMJ,OAC1E,G,EAITQ,sBAAwB,SAAChB,GAAD,OAAY,WAClC,EAAKiB,SAAL,eAAiBjB,EAAS,EAAKY,MAAMZ,GAAU,M,4CAGjD,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,cAAC,EAAD,CAASF,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,QAASqB,OAAOC,KAAKxB,KAAKiB,OAC1Bd,gBAAiBH,KAAKqB,0BAG1B,cAAC,EAAD,CAASzB,MAAM,aAAf,SACE,cAAC,EAAD,CACEe,KAAMX,KAAKiB,MAAMN,KACjBC,QAASZ,KAAKiB,MAAML,QACpBC,IAAKb,KAAKiB,MAAMJ,IAChBC,MAAOd,KAAKiB,MAAMN,KAAOX,KAAKiB,MAAML,QAAUZ,KAAKiB,MAAMJ,IACzDE,mBAAoBf,KAAKkB,mC,GAlCnBX,cCIHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a33848a.chunk.js","sourcesContent":["export const Section = ({ title, children }) => (\r\n  <section>\r\n    <h2 className=\"section-title\">{title}</h2>\r\n    {children}\r\n  </section>\r\n);\r\n","import { Component } from 'react';\r\n\r\nexport class FeedbackOptions extends Component {\r\n  render() {\r\n    const { options, onLeaveFeedback } = this.props;\r\n\r\n    return (\r\n      <div className=\"feedback-container\">\r\n        {options.map((option) => {\r\n          return (\r\n            <button\r\n              key={'id-' + option}\r\n              onClick={onLeaveFeedback(option)}\r\n              className=\"feedback-button\"\r\n            >\r\n              {option}\r\n            </button>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const Notification = ({ message }) => {\r\n  return <p className=\"stat-notification\">{message}</p>;\r\n};\r\n","import { Component } from 'react';\r\nimport { Notification } from '../../components/Notification';\r\n\r\nexport class Statistics extends Component {\r\n  render() {\r\n    const { good, neutral, bad, total, positivePercentage } = this.props;\r\n    return good || neutral || bad ? (\r\n      <div>\r\n        <p className=\"stat-data\">Good: {good}</p>\r\n        <p className=\"stat-data\">Neutral: {neutral}</p>\r\n        <p className=\"stat-data\">Bad: {bad}</p>\r\n        <p className=\"stat-data\">Total: {total}</p>\r\n        <p className=\"stat-data\">Positive feedback: {positivePercentage}%</p>\r\n      </div>\r\n    ) : (\r\n      <Notification message=\"No feedback given\" />\r\n    );\r\n  }\r\n}\r\n","import { Component } from 'react';\n\nimport { Section } from './components/Section';\nimport { FeedbackOptions } from './components/FeedbackOptions';\nimport { Statistics } from './components/Statistics';\n\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  getPositivePercentage = () => {\n    return (\n      Math.round(\n        (this.state.good * 100) / (this.state.good + this.state.neutral + this.state.bad)\n      ) || 0\n    );\n  };\n\n  feedbackActionHandler = (option) => () => {\n    this.setState({ [option]: this.state[option] + 1 });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.feedbackActionHandler}\n          ></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={this.state.good + this.state.neutral + this.state.bad}\n            positivePercentage={this.getPositivePercentage()}\n          ></Statistics>\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}